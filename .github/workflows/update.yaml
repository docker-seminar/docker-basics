name: Inform updating personal main branches
run-name: Updating Personal Main Branches on ${{ github.ref_name }}
on:
  push:
    branches:
      - main
      - infra/38 # Todo remove this branch
permissions:
  contents: write
jobs:
  update_personal_branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.ACTIONS_PAT }}
      - name: Retrieve All Personal Branches Matching `**/main`
        id: list_branches
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const branches = await github.paginate(
                github.rest.repos.listBranches,
                {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                }
            )
            const personalMainBranches = branches
                .filter(branch => branch.name.endsWith('/main'))
                .map(branch => branch.name)
            
            if (personalMainBranches.length === 0) {
                core.notice('No personal main branches found.')   
            } else {
                core.notice(`Found personal main branches: ${personalMainBranches.join(', ')}`)
            }
            
            core.setOutput('branches', JSON.stringify(personalMainBranches))
      - name: Find branches that can be updated without conflicts
        id: updateable_branches
        run: |
          # 1. Determine the SHA of the 'main' branch
          MAIN_BRANCH_SHA=$(git rev-parse main)
          
          # 2. Parse the JSON array of personal branches
          PERSONAL_BRANCHES=$(echo '${{ steps.list_branches.outputs.branches }}' | jq -r '.[]')

          echo "Finding branches that can be fast-forwarded or need merging..."

          # 3. Clear (or create) tracking files
          > updateable_branches.txt
          > conflict_free_diverged_branches.txt

          for branch in $PERSONAL_BRANCHES; do
            echo "::group::Checking branch: $branch"
            git fetch origin $branch

            # Determine the SHA of the branch's HEAD
            BRANCH_HEAD_SHA=$(git rev-parse origin/$branch)

            # Check if the branch is already up to date with main
            if [ "$(git merge-base --is-ancestor $MAIN_BRANCH_SHA $BRANCH_HEAD_SHA && echo true)" = "true" ]; then
              echo "Branch $branch is already up to date with main. Skipping."
              continue
            fi

            # Check if the branch can be fast-forwarded:
            if git merge-base --is-ancestor origin/$branch $MAIN_BRANCH_SHA; then 
              echo "$branch" >> updateable_branches.txt
              echo "Branch $branch can be fast-forwarded."
            else
              echo "Branch $branch is not a direct ancestor. Checking for conflicts..."

              # Create a temporary branch from 'main' to test the merge
              git checkout -b temp-merge-branch $MAIN_BRANCH_SHA

              MERGE_OUTPUT=$(git merge --no-commit --no-ff origin/$branch 2>&1 || true) # Both standard output and errors (2>&1) are redirected to the variable MERGE_OUTPUT
              if echo "$MERGE_OUTPUT" | grep -q "CONFLICT"; then
                # Capture the conflict files
                CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
                echo "Conflicts in branch $branch:"
                echo "$CONFLICT_FILES"
              else
                # No conflicts but the branch cannot be fast-forwarded
                echo "$branch" >> conflict_free_diverged_branches.txt
                echo "Branch $branch has no conflict but cannot be fast-forwarded."
              fi

              # Cleanup the temporary branch
              git checkout main
              git branch -D temp-merge-branch || true
            fi
            echo "::endGroup::"
          done

          # Convert fast-forwardable branches into a single line
          if [ -s updateable_branches.txt ]; then
            SINGLE_LINE="$(paste -s -d ' ' updateable_branches.txt)"
            echo "Branches that can be fast-forwarded (single line): $SINGLE_LINE"
            echo "updateable_branches=$SINGLE_LINE" >> $GITHUB_OUTPUT
          else
            echo "::notice::No branches can be fast-forwarded."
          fi

          # Convert conflict-free diverged branches into a single line
          if [ -s conflict_free_diverged_branches.txt ]; then
            SINGLE_LINE="$(paste -s -d ' ' conflict_free_diverged_branches.txt)"
            echo "Conflict-free diverged branches (single line): $SINGLE_LINE"
            echo "conflict_free_diverged_branches=$SINGLE_LINE" >> $GITHUB_OUTPUT
          else
            echo "No conflict-free diverged branches found."
          fi
      - name: Fast-Forward Branches
        if: steps.updateable_branches.outputs.updateable_branches
        run: |
          # 1. Retrieve the single-line list of updateable branches
          UPDATEABLE_BRANCHES=$(echo '${{ steps.updateable_branches.outputs.updateable_branches }}' | tr '\n' ' ')
          
          echo "Fast-forwarding the following branches: $UPDATEABLE_BRANCHES"

          # 2. Loop through each space-separated branch
          for branch in $UPDATEABLE_BRANCHES; do
            echo "::group::Fast-forwarding branch: $branch"
          
            # a) Fetch the remote branch to ensure we have the leatest commits locally
            git fetch origin $branch

            # b) Create or reset a local branch named "$branch" to match "origin/$branch"
            git checkout -B $branch origin/$branch
          
            # c) Attempt a fast-forward merge to origin/main
            #    Using --ff-only ensures that Git will not crate a merge commit.
            git fetch origin main
            git merge --ff-only origin/main || {
              echo "::error::Failed to fast-forward $branch. This should not happen for branches makred updateable."
              exit 1
            }

            # d) Push the updated branch back to the remote
            git push origin $branch || {
              echo "::error::Failed to push updates for branch: $branch."
              exit 1
            }
            echo "::endGroup::"
          done
      - name: Merge Diverged Conflict-Free Branches
        if: steps.updateable_branches.outputs.conflict_free_diverged_branches
        run: |
          # Retrieve the list of conflict-free diverged branches
          DIVERGED_BRANCHES=$(echo '${{ steps.updateable_branches.outputs.conflict_free_diverged_branches }}' | tr '\n' ' ')

          echo "Merging the following conflict-free diverged branches: $DIVERGED_BRANCHES"
          
          # Configure Git committer identity
          git config user.name "github-actions[bot]"
          git config user.email "luxorienskim@gmail.com"
          
          for branch in $DIVERGED_BRANCHES; do
            echo "::group::Processing branch: $branch"
          
            git fetch origin $branch
          
            # Checkout the branch locally, resetting it to the remote version
            git checkout -B $branch origin/$branch
          
            git merge origin/main \
              --message "Merging main into $branch to synchronize changes" \
              --message "This update was performed automatically by the update workflow." || {
                echo "::error::Unexpected error occurred while merging $branch. Aborting."
                exit 1
              }

            git push origin $branch || {
              echo "::error::Faield to push merged updates for branch: $branch."
              exit 1
            }
          
            echo "Successfully merged and pushed updates for branch: $branch."
            echo "::endGroup::"
          done